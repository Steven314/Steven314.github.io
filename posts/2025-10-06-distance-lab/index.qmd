---
title: "Distance Calculations Lab Using R"
author:
  - name:
      given: Steven
      family: Carter
    email: steven.carter4@utoledo.edu
    url: https://slcarter.com
    orcid: 0009-0008-5329-3763
    affiliation: 
      name: University of Toledo
      url: https://utoledo.edu
date: 2025-10-06
categories: [Distance, R, Spatial]
date-format: long
format:
  html:
    toc: true
    toc-location: right
    lightbox: true
    fig-width: 6
    fig-asp: 0.618
    other-links:
      - text: Presentation
        icon: projector
        href: https://slcarter.com/distance-calculations
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>"
---

This lab walks through an example analysis using Lucas County housing data from the 1990s.
It was presented on October 6, 2025 to the SISS7020 PhD class at the University of Toledo.

# Packages and Data

```{r}
#| warning: false
#| message: false
library(tidyverse)
library(spData) # for the dataset
library(sf)
library(geosphere)

# The sp format is old and may not work right, so convert to modern format.
house_sf <- st_as_sf(house, 2834) |> 
  st_transform(crs = st_crs("NAD83"))
```

If you were not able to install the `{spData}` package, download the `house` dataset as an `.rds` file from Blackboard.

::: {.callout-note title="Coordinate Systems"}
Originally the `house` data is in a local coordinate system.
It has units for latitude and longitude with which I was unfamiliar.
For the sake of easier interpretation I've converted the coordinates to NAD83.
It will be fine for what we are doing today.
:::

# Scatter Plot

Just to make sure the data looks right and to get an idea of what we are working with, let's plot the locations.

```{r}
#| label: fig-lucas-scatter
#| code-fold: true
ggplot(house_sf) +
  geom_sf(aes(color = price), alpha = 0.25) +
  theme_bw() +
  scale_color_continuous(
    trans = "log",
    labels = scales::label_currency(),
    breaks = c(1e4, 3e4, 1e5, 5e5)
  ) +
  labs(
    title = "House Sales in Lucas County, 1993 - 1998",
    x = "Longitude",
    y = "Latitude",
    color = "Sale Price"
  )
```

There are also a couple methods to achieve an interactive visualization which will not be covered here.^[Leaflet and Plotly each have R and Python interfaces to their JavaScript libraries. If you see a interactive map on a website, there is a good chance it was made with one of those libraries.]

# Distance to City Center

```{r}
toledo_lat <- 41.652778
toledo_lng <- -83.537778
```

Wikipedia gives the center of Toledo as `r glue::glue("({toledo_lat}, {toledo_lng})")`.

Let's establish a few distance metrics and compare the results.

```{r}
euclidean <- function(ref, new) {
  sqrt(rowSums((ref - new)^2)) *
    (pi / 180) * # convert to radians
    6371 # km, the radius of the earth
}

manhattan <- function(ref, new) {
  rowSums(
    abs(ref - new) * 
      (pi / 180) *
      6371
  )
}

# and also Haversine from `{geosphere}`
```

So now we can calculate the distance to the city center with Euclidean, Manhattan, and Haversine distances.

```{r}
house_sf_dist <- house_sf |> 
  mutate(
    longitude = st_coordinates(geometry)[, 1],
    latitude = st_coordinates(geometry)[, 2],
    toledo_lat, 
    toledo_lng,
    # redefine age
    age = as.numeric(as.character(syear)) - yrbuilt
  ) |> 
  mutate(
    distance_euclidean = euclidean(
      cbind(toledo_lat, toledo_lng), 
      cbind(latitude, longitude)
    ),
    distance_manhattan = manhattan(
      cbind(toledo_lat, toledo_lng), 
      cbind(latitude, longitude)
    ),
    distance_haversine = geosphere::distHaversine(
      cbind(toledo_lng, toledo_lat), 
      cbind(longitude, latitude)
    ) / 1000 # convert meters to kilometers
  )
```

```{r}
#| label: fig-lucas-center
#| code-fold: true
ggplot(house_sf_dist) +
  geom_sf(
    aes(color = distance_manhattan > 15), 
    alpha = 0.25
  ) +
  annotate(
    x = toledo_lng, 
    y = toledo_lat, 
    geom = "point", 
    color = "black", 
    size = 2
  ) +
  theme_bw() +
  labs(
    title = "House Sales in Lucas County, 1993 - 1998",
    x = "Longitude",
    y = "Latitude",
    color = "Manhattan > 15km"
  )
```

# Housing Model

## Exploratory Data Analysis

```{r}
#| label: fig-price-dist-scatter
#| code-fold: true
ggplot(
  data = house_sf_dist,
  aes(
    x = distance_haversine, 
    y = price
  )
) +
  geom_point(alpha = 0.1) +
  scale_y_log10(
    labels = scales::label_currency(
      scale_cut = scales::cut_short_scale()
    )
  ) +
  scale_x_log10() +
  theme_bw() +
  labs(
    x = "Haversine Distance (km)",
    y = "Sale Price",
    title = "Housing Sales in Lucas County, 1993-1998"
  )
```

With log-scales on both the $x$ and $y$ axes there seems to be a mostly linear relationship.
That is convenient.

```{r}
#| label: fig-price-dist-scatter-lm
#| code-fold: true
ggplot(
  data = house_sf_dist,
  aes(
    x = distance_haversine, 
    y = price
  )
) +
  geom_point(alpha = 0.1) +
  geom_smooth(method = "lm", formula = "y ~ x", se = FALSE) +
  scale_y_log10(
    labels = scales::label_currency(
      scale_cut = scales::cut_short_scale()
    )
  ) +
  scale_x_log10() +
  theme_bw() +
  labs(
    x = "Haversine Distance (km)",
    y = "Sale Price",
    title = "Housing Sales in Lucas County, 1993-1998"
  )
```

What about the other variables?
How might housing prices vary for reasons other than distance?
Or, how might distance to correlated with other variables?

Here are the variables we have:

```{r}
glimpse(house_sf_dist)
```

Information about each variable can be found in the associated help file.
It can be opened by typing `?house` in the console.
Although it is not the most thorough explanations of each variable, it is still helpful.

We can make a list of relationships to consider.
In these there are plenty of hypotheses.

- As you move toward the city center, lots get smaller, thus prices go down. The converse also being the case.
- Having more bedrooms, bathrooms, or stories would increase price.
  - This may be correlated with lot size.
- The city center may be older and perhaps older houses have lower prices.

All of those are statements we can test.

We can also come up with statements we can't test with the data currently at hand.

- Houses close to highways have lower value.
- Proximity to amenities, such as schools, parks, and entertainment, can contribute to changes in housing prices.
- A house of poor quality would have lower value.

### Spatial Variation

::: {.callout-note}
Spatial variance is something I would expect us to cover in an upcoming spatial statistics class.
For now, I'll cover how some variables are correlated with distance from the city center and price.
:::

#### Age

```{r}
#| label: fig-price-age
#| code-fold: true
ggplot(
  data = house_sf_dist,
  aes(
    x = yrbuilt,
    y = price
  )
) + 
  geom_point(alpha = 0.1) +
  scale_y_log10(
    labels = scales::label_currency(
      scale_cut = scales::cut_short_scale()
    )
  ) +
  theme_bw() +
  labs(
    x = "Year Build",
    y = "Sale Price"
  )
```

Look at the final years.
Something weird seems to be happening with houses built and sold at the end of the dataset.
There houses would have a very young age.
(Some houses even have a negative age.)
Perhaps this means the sale price is reflecting the price of an empty lot and not the price of a house.
This could be a reason to exclude houses with an age less than some threshold, say 2 years.

```{r}
#| label: fig-age-dist
#| code-fold: true
ggplot(
  data = house_sf_dist,
  aes(
    x = distance_haversine,
    y = yrbuilt
  )
) + 
  geom_point(alpha = 0.1) +
  scale_x_log10() +
  theme_bw() +
  labs(
    x = "Distance to City Center (km)",
    y = "Year Built"
  )
```

::: {.callout-caution title="Question"}
What might have caused those two bands where there are no houses being build (or at least sold)?
:::

## Linear Model

The `lm()` function can be used for a linear model.
It takes a dataset for training and a formula.

::: {.callout-important title="Splitting Data"}
When training a model to be used for predicting new data you should split into training and testing (and potentially validation) sets.
When there is a spatial component you may also want to consider the spatial relationships.

- [*Spatial Data Science*](https://r-spatial.org/book) seems like a good resource for more info on this.
  I have yet to read it, but it is on the list for the future.
- [*Tidy Modeling with R*, chapter 5](https://www.tmwr.org/splitting) is also a good resource for information on training a model.
  I have read this whole book and can recommend it.
- [`{spatialsample}`](https://spatialsample.tidymodels.org) is a package in the `tidymodels` and `tidyverse` ecosystem that can perform spatial sampling.
  I haven't used it yet, but likely will within the next year.
:::

First let's try a simple model with just distance and taking logs of distance and price.

```{r}
simple_model <- lm(
  data = house_sf_dist,
  formula = log(price) ~ log(distance_haversine)
)

simple_model |> 
  summary()
```

This has a decent $R^2$ value.
However, we can't trust the model coefficients.
Using only distance isn't a very good model.

Why?

Other factors have spatial variance.
Distance isn't the only thing changing between observations.
We have an endogeneity issue or omitted variable bias.
That should sound familiar from an econometrics class.
If not, you should be covering that soon.

```{r}
big_model <- lm(
  data = house_sf_dist,
  formula = log(price) ~ log(distance_haversine) +
    lotsize +
    beds +
    baths +
    halfbaths +
    stories +
    garage +
    TLA +
    age +
    syear
)

big_model |> 
  summary()
```

This model improves the $R^2$ value.
Compare the coefficiencts for $\log(d_\text{haversine})$.
The coefficient in the second model is only half of that in the first model.

This means that some of the variation in price is better explained by the other variables we included.

## Model Conclusion

If we are happy with the reasoning for our model (i.e. we don't expect any omitted variable bias or other statistical issues), we could attempt to claim a causal effect of distance on housing prices.

The predictions can be found with the `predict()` function.

Notice how we have to use `exp()` wrapping `predict`.
This is because we used `log(price)`.
We need to reverse the logarithm.

```{r}
house_sf_dist |> 
  as_tibble() |> 
  mutate(
    price_hat = exp(predict(
      big_model, 
      data = house_sf_dist
    ))
  ) |> 
  select(price, price_hat)
```


## More Complicated Models

The actual model technique may not necessarily be more complicated, but the feature engineering ([TMwR chapter 8](https://www.tmwr.org/recipes)) is fancier.

- If a house in the same neighborhood (or at least nearby) sold the previous year, the housing prices in the neighborhood may be influenced. The proximity with a recently sold house and how similar (also distance, but in non-spatial dimensions) could affect how strong that influence is.
  - I couldn't find a paper that covered this, but I didn't look for very long.
- Proximity to other points-of-interest, such as schools, parks, entertainment, or highway access, can be considered.
  - [Measuring Highway Impacts on House Prices Using Spatial Regression](https://www.tandfonline.com/doi/abs/10.1080/10835547.2015.12091876)
- Using travel time instead of straight line distance.
  - [Road distance and travel time for an improved house price Kriging predictor](https://www.tandfonline.com/doi/full/10.1080/10095020.2018.1503775)